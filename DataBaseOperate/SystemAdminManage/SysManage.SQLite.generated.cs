//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq;

using LinqToDB;
using LinqToDB.DataProvider;
using LinqToDB.Mapping;

namespace SystemManageDataModels
{
    /// <summary>
    /// Database       : SysManage
    /// Data Source    : SysManage
    /// Server Version : 3.8.5
    /// </summary>
    public partial class SysManageDb : LinqToDB.Data.DataConnection
    {
        public ITable<Administrator> Administrators { get { return this.GetTable<Administrator>(); } }
        public ITable<CollectorScaleSetting> CollectorScaleSettings { get { return this.GetTable<CollectorScaleSetting>(); } }
        public ITable<CollectorSetting> CollectorSettings { get { return this.GetTable<CollectorSetting>(); } }
        public ITable<SerialPortSetting> SerialPortSettings { get { return this.GetTable<SerialPortSetting>(); } }

        public SysManageDb()
        {
            InitDataContext();
        }

        public SysManageDb(string configuration)
            : base(configuration)
        {
            InitDataContext();
        }

        public SysManageDb(IDataProvider dataProvider, string configuration)
            : base(dataProvider, configuration)
        {
            InitDataContext();
        }

        partial void InitDataContext();
    }

    [Table("Administrator")]
    public partial class Administrator
    {
        [PrimaryKey, Identity]
        public long ID { get; set; } // integer
        [Column, NotNull]
        public string User { get; set; } // nvarchar(6)
        [Column, Nullable]
        public string Passwords { get; set; } // nvarchar(6)
    }

    [Table("CollectorScaleSetting")]
    public partial class CollectorScaleSetting
    {
        [PrimaryKey, Identity]
        public long ID { get; set; } // integer
        [Column, Nullable]
        public string ChannelId { get; set; } // nvarchar(2)
        [Column, Nullable]
        public string ScaleFactor { get; set; } // nvarchar(8)
    }

    [Table("CollectorSetting")]
    public partial class CollectorSetting
    {
        [PrimaryKey, Identity]
        public long ID { get; set; } // integer
        [Column, Nullable]
        public string CollectorId { get; set; } // nvarchar(16)
        [Column, Nullable]
        public string Passwords { get; set; } // nvarchar(8)
    }

    [Table("SerialPortSetting")]
    public partial class SerialPortSetting
    {
        [PrimaryKey, Identity]
        public long ID { get; set; } // integer
        [Column, NotNull]
        public long SerialNumber { get; set; } // integer
        [Column, Nullable]
        public string Address { get; set; } // nvarchar(254)
        [Column, Nullable]
        public string BaudRate { get; set; } // nvarchar(254)
        [Column, Nullable]
        public long? Delay { get; set; } // integer
    }

    public static partial class TableExtensions
    {
        public static Administrator Find(this ITable<Administrator> table, long ID)
        {
            return table.FirstOrDefault(t =>
                t.ID == ID);
        }

        public static CollectorScaleSetting Find(this ITable<CollectorScaleSetting> table, long ID)
        {
            return table.FirstOrDefault(t =>
                t.ID == ID);
        }

        public static CollectorSetting Find(this ITable<CollectorSetting> table, long ID)
        {
            return table.FirstOrDefault(t =>
                t.ID == ID);
        }

        public static SerialPortSetting Find(this ITable<SerialPortSetting> table, long ID)
        {
            return table.FirstOrDefault(t =>
                t.ID == ID);
        }
    }
}
